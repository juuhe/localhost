<?php

class PHPExcel_Calculation
{
	const CALCULATION_REGEXP_NUMBER = '[-+]?\\d*\\.?\\d+(e[-+]?\\d+)?';
	const CALCULATION_REGEXP_STRING = '"(?:[^"]|"")*"';
	const CALCULATION_REGEXP_OPENBRACE = '\\(';
	const CALCULATION_REGEXP_FUNCTION = '@?([A-Z][A-Z0-9\\.]*)[\\s]*\\(';
	const CALCULATION_REGEXP_CELLREF = '(((\\w*)|(\'[^\']*\')|(\\"[^\\"]*\\"))!)?\\$?([a-z]{1,3})\\$?(\\d+)';
	const CALCULATION_REGEXP_NAMEDRANGE = '(((\\w*)|(\'.*\')|(\\".*\\"))!)?([_A-Z][_A-Z0-9]*)';
	const CALCULATION_REGEXP_ERROR = '\\#[A-Z][A-Z0_\\/]*[!\\?]?';
	const RETURN_ARRAY_AS_ERROR = 'error';
	const RETURN_ARRAY_AS_VALUE = 'value';
	const RETURN_ARRAY_AS_ARRAY = 'array';

	static private $returnArrayAsType = self::RETURN_ARRAY_AS_VALUE;
	/**
	 *	Instance of this class
	 *
	 *	@access	private
	 *	@var PHPExcel_Calculation
	 */
	static private $_instance;
	/**
	 *	Calculation cache
	 *
	 *	@access	private
	 *	@var array
	 */
	static private $_calculationCache = array();
	/**
	 *	Calculation cache enabled
	 *
	 *	@access	private
	 *	@var boolean
	 */
	static private $_calculationCacheEnabled = true;
	/**
	 *	Calculation cache expiration time
	 *
	 *	@access	private
	 *	@var float
	 */
	static private $_calculationCacheExpirationTime = 15;
	/**
	 *	List of operators that can be used within formulae
	 *
	 *	@access	private
	 *	@var array
	 */
	static private $_operators = array('+', '-', '*', '/', '^', '&', '%', '~', '>', '<', '=', '>=', '<=', '<>', '|', ':');
	/**
	 *	List of binary operators (those that expect two operands)
	 *
	 *	@access	private
	 *	@var array
	 */
	static private $_binaryOperators = array('+', '-', '*', '/', '^', '&', '>', '<', '=', '>=', '<=', '<>', '|', ':');
	/**
	 *	Flag to determine how formula errors should be handled
	 *		If true, then a user error will be triggered
	 *		If false, then an exception will be thrown
	 *
	 *	@access	public
	 *	@var boolean
	 *
	 */
	public $suppressFormulaErrors = false;
	/**
	 *	Error message for any error that was raised/thrown by the calculation engine
	 *
	 *	@access	public
	 *	@var string
	 *
	 */
	public $formulaError;
	/**
	 *	Flag to determine whether a debug log should be generated by the calculation engine
	 *		If true, then a debug log will be generated
	 *		If false, then a debug log will not be generated
	 *
	 *	@access	public
	 *	@var boolean
	 *
	 */
	public $writeDebugLog = false;
	/**
	 *	An array of the nested cell references accessed by the calculation engine, used for the debug log
	 *
	 *	@access	private
	 *	@var array of string
	 *
	 */
	private $debugLogStack = array();
	/**
	 *	The debug log generated by the calculation engine
	 *
	 *	@access	public
	 *	@var array of string
	 *
	 */
	public $debugLog = array();
	private $_cyclicFormulaCount = 0;
	private $_cyclicFormulaCell = '';
	public $cyclicFormulaCount = 0;
	static private $_localeLanguage = 'en_us';
	static private $_validLocaleLanguages = array('en');
	static private $_localeArgumentSeparator = ',';
	static private $_localeFunctions = array();
	static private $_localeBoolean = array('TRUE' => 'TRUE', 'FALSE' => 'FALSE', 'NULL' => 'NULL');
	static private $_ExcelConstants = array('TRUE' => true, 'FALSE' => false, 'NULL' => NULL);
	static private $_PHPExcelFunctions = array(
		'ABS'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'abs', 'argumentCount' => '1'),
		'ACCRINT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::ACCRINT', 'argumentCount' => '4-7'),
		'ACCRINTM'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::ACCRINTM', 'argumentCount' => '3-5'),
		'ACOS'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'acos', 'argumentCount' => '1'),
		'ACOSH'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'acosh', 'argumentCount' => '1'),
		'ADDRESS'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::CELL_ADDRESS', 'argumentCount' => '2-5'),
		'AMORDEGRC'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::AMORDEGRC', 'argumentCount' => '6,7'),
		'AMORLINC'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::AMORLINC', 'argumentCount' => '6,7'),
		'AND'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGICAL_AND', 'argumentCount' => '1+'),
		'AREAS'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'ASC'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'ASIN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'asin', 'argumentCount' => '1'),
		'ASINH'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'asinh', 'argumentCount' => '1'),
		'ATAN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'atan', 'argumentCount' => '1'),
		'ATAN2'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::REVERSE_ATAN2', 'argumentCount' => '2'),
		'ATANH'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'atanh', 'argumentCount' => '1'),
		'AVEDEV'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::AVEDEV', 'argumentCount' => '1+'),
		'AVERAGE'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::AVERAGE', 'argumentCount' => '1+'),
		'AVERAGEA'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::AVERAGEA', 'argumentCount' => '1+'),
		'AVERAGEIF'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2,3'),
		'AVERAGEIFS'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3+'),
		'BAHTTEXT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'BESSELI'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BESSELI', 'argumentCount' => '2'),
		'BESSELJ'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BESSELJ', 'argumentCount' => '2'),
		'BESSELK'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BESSELK', 'argumentCount' => '2'),
		'BESSELY'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BESSELY', 'argumentCount' => '2'),
		'BETADIST'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::BETADIST', 'argumentCount' => '3-5'),
		'BETAINV'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::BETAINV', 'argumentCount' => '3-5'),
		'BIN2DEC'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BINTODEC', 'argumentCount' => '1'),
		'BIN2HEX'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BINTOHEX', 'argumentCount' => '1,2'),
		'BIN2OCT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::BINTOOCT', 'argumentCount' => '1,2'),
		'BINOMDIST'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::BINOMDIST', 'argumentCount' => '4'),
		'CEILING'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::CEILING', 'argumentCount' => '2'),
		'CELL'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1,2'),
		'CHAR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::CHARACTER', 'argumentCount' => '1'),
		'CHIDIST'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CHIDIST', 'argumentCount' => '2'),
		'CHIINV'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CHIINV', 'argumentCount' => '2'),
		'CHITEST'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'CHOOSE'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::CHOOSE', 'argumentCount' => '2+'),
		'CLEAN'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::TRIMNONPRINTABLE', 'argumentCount' => '1'),
		'CODE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::ASCIICODE', 'argumentCount' => '1'),
		'COLUMN'             => array(
			'category'        => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE,
			'functionCall'    => 'PHPExcel_Calculation_Functions::COLUMN',
			'argumentCount'   => '-1',
			'passByReference' => array(true)
			),
		'COLUMNS'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::COLUMNS', 'argumentCount' => '1'),
		'COMBIN'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::COMBIN', 'argumentCount' => '2'),
		'COMPLEX'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::COMPLEX', 'argumentCount' => '2,3'),
		'CONCATENATE'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::CONCATENATE', 'argumentCount' => '1+'),
		'CONFIDENCE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CONFIDENCE', 'argumentCount' => '3'),
		'CONVERT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::CONVERTUOM', 'argumentCount' => '3'),
		'CORREL'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CORREL', 'argumentCount' => '2'),
		'COS'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'cos', 'argumentCount' => '1'),
		'COSH'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'cosh', 'argumentCount' => '1'),
		'COUNT'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUNT', 'argumentCount' => '1+'),
		'COUNTA'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUNTA', 'argumentCount' => '1+'),
		'COUNTBLANK'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUNTBLANK', 'argumentCount' => '1'),
		'COUNTIF'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUNTIF', 'argumentCount' => '2'),
		'COUNTIFS'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'COUPDAYBS'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPDAYBS', 'argumentCount' => '3,4'),
		'COUPDAYS'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPDAYS', 'argumentCount' => '3,4'),
		'COUPDAYSNC'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPDAYSNC', 'argumentCount' => '3,4'),
		'COUPNCD'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPNCD', 'argumentCount' => '3,4'),
		'COUPNUM'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPNUM', 'argumentCount' => '3,4'),
		'COUPPCD'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COUPPCD', 'argumentCount' => '3,4'),
		'COVAR'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::COVAR', 'argumentCount' => '2'),
		'CRITBINOM'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CRITBINOM', 'argumentCount' => '3'),
		'CUBEKPIMEMBER'      => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBEMEMBER'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBEMEMBERPROPERTY' => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBERANKEDMEMBER'   => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBESET'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBESETCOUNT'       => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUBEVALUE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_CUBE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'CUMIPMT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CUMIPMT', 'argumentCount' => '6'),
		'CUMPRINC'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CUMPRINC', 'argumentCount' => '6'),
		'DATE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DATE', 'argumentCount' => '3'),
		'DATEDIF'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DATEDIF', 'argumentCount' => '2,3'),
		'DATEVALUE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DATEVALUE', 'argumentCount' => '1'),
		'DAVERAGE'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DAY'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DAYOFMONTH', 'argumentCount' => '1'),
		'DAYS360'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DAYS360', 'argumentCount' => '2,3'),
		'DB'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DB', 'argumentCount' => '4,5'),
		'DCOUNT'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DCOUNTA'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DDB'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DDB', 'argumentCount' => '4,5'),
		'DEC2BIN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::DECTOBIN', 'argumentCount' => '1,2'),
		'DEC2HEX'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::DECTOHEX', 'argumentCount' => '1,2'),
		'DEC2OCT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::DECTOOCT', 'argumentCount' => '1,2'),
		'DEGREES'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'rad2deg', 'argumentCount' => '1'),
		'DELTA'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::DELTA', 'argumentCount' => '1,2'),
		'DEVSQ'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DEVSQ', 'argumentCount' => '1+'),
		'DGET'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DISC'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DISC', 'argumentCount' => '4,5'),
		'DMAX'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DMIN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DOLLAR'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DOLLAR', 'argumentCount' => '1,2'),
		'DOLLARDE'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DOLLARDE', 'argumentCount' => '2'),
		'DOLLARFR'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DOLLARFR', 'argumentCount' => '2'),
		'DPRODUCT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DSTDEV'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DSTDEVP'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DSUM'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DURATION'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '5,6'),
		'DVAR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'DVARP'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATABASE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'EDATE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::EDATE', 'argumentCount' => '2'),
		'EFFECT'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::EFFECT', 'argumentCount' => '2'),
		'EOMONTH'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::EOMONTH', 'argumentCount' => '2'),
		'ERF'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::ERF', 'argumentCount' => '1,2'),
		'ERFC'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::ERFC', 'argumentCount' => '1'),
		'ERROR.TYPE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::ERROR_TYPE', 'argumentCount' => '1'),
		'EVEN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::EVEN', 'argumentCount' => '1'),
		'EXACT'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'EXP'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'exp', 'argumentCount' => '1'),
		'EXPONDIST'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::EXPONDIST', 'argumentCount' => '3'),
		'FACT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::FACT', 'argumentCount' => '1'),
		'FACTDOUBLE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::FACTDOUBLE', 'argumentCount' => '1'),
		'FALSE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGICAL_FALSE', 'argumentCount' => '0'),
		'FDIST'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'FIND'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::SEARCHSENSITIVE', 'argumentCount' => '2,3'),
		'FINDB'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::SEARCHSENSITIVE', 'argumentCount' => '2,3'),
		'FINV'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3'),
		'FISHER'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::FISHER', 'argumentCount' => '1'),
		'FISHERINV'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::FISHERINV', 'argumentCount' => '1'),
		'FIXED'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::FIXEDFORMAT', 'argumentCount' => '1-3'),
		'FLOOR'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::FLOOR', 'argumentCount' => '2'),
		'FORECAST'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::FORECAST', 'argumentCount' => '3'),
		'FREQUENCY'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'FTEST'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'FV'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::FV', 'argumentCount' => '3-5'),
		'FVSCHEDULE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::FVSCHEDULE', 'argumentCount' => '2'),
		'GAMMADIST'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::GAMMADIST', 'argumentCount' => '4'),
		'GAMMAINV'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::GAMMAINV', 'argumentCount' => '3'),
		'GAMMALN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::GAMMALN', 'argumentCount' => '1'),
		'GCD'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::GCD', 'argumentCount' => '1+'),
		'GEOMEAN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::GEOMEAN', 'argumentCount' => '1+'),
		'GESTEP'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::GESTEP', 'argumentCount' => '1,2'),
		'GETPIVOTDATA'       => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2+'),
		'GROWTH'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::GROWTH', 'argumentCount' => '1-4'),
		'HARMEAN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::HARMEAN', 'argumentCount' => '1+'),
		'HEX2BIN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::HEXTOBIN', 'argumentCount' => '1,2'),
		'HEX2DEC'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::HEXTODEC', 'argumentCount' => '1'),
		'HEX2OCT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::HEXTOOCT', 'argumentCount' => '1,2'),
		'HLOOKUP'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3,4'),
		'HOUR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::HOUROFDAY', 'argumentCount' => '1'),
		'HYPERLINK'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::HYPERLINK', 'argumentCount' => '1,2', 'passCellReference' => true),
		'HYPGEOMDIST'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::HYPGEOMDIST', 'argumentCount' => '4'),
		'IF'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STATEMENT_IF', 'argumentCount' => '1-3'),
		'IFERROR'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STATEMENT_IFERROR', 'argumentCount' => '2'),
		'IMABS'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMABS', 'argumentCount' => '1'),
		'IMAGINARY'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMAGINARY', 'argumentCount' => '1'),
		'IMARGUMENT'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMARGUMENT', 'argumentCount' => '1'),
		'IMCONJUGATE'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMCONJUGATE', 'argumentCount' => '1'),
		'IMCOS'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMCOS', 'argumentCount' => '1'),
		'IMDIV'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMDIV', 'argumentCount' => '2'),
		'IMEXP'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMEXP', 'argumentCount' => '1'),
		'IMLN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMLN', 'argumentCount' => '1'),
		'IMLOG10'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMLOG10', 'argumentCount' => '1'),
		'IMLOG2'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMLOG2', 'argumentCount' => '1'),
		'IMPOWER'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMPOWER', 'argumentCount' => '2'),
		'IMPRODUCT'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMPRODUCT', 'argumentCount' => '1+'),
		'IMREAL'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMREAL', 'argumentCount' => '1'),
		'IMSIN'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMSIN', 'argumentCount' => '1'),
		'IMSQRT'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMSQRT', 'argumentCount' => '1'),
		'IMSUB'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMSUB', 'argumentCount' => '2'),
		'IMSUM'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::IMSUM', 'argumentCount' => '1+'),
		'INDEX'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::INDEX', 'argumentCount' => '1-4'),
		'INDIRECT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::INDIRECT', 'argumentCount' => '1,2', 'passCellReference' => true),
		'INFO'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'INT'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::INTVALUE', 'argumentCount' => '1'),
		'INTERCEPT'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::INTERCEPT', 'argumentCount' => '2'),
		'INTRATE'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::INTRATE', 'argumentCount' => '4,5'),
		'IPMT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::IPMT', 'argumentCount' => '4-6'),
		'IRR'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::IRR', 'argumentCount' => '1,2'),
		'ISBLANK'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_BLANK', 'argumentCount' => '1'),
		'ISERR'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_ERR', 'argumentCount' => '1'),
		'ISERROR'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_ERROR', 'argumentCount' => '1'),
		'ISEVEN'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_EVEN', 'argumentCount' => '1'),
		'ISLOGICAL'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_LOGICAL', 'argumentCount' => '1'),
		'ISNA'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_NA', 'argumentCount' => '1'),
		'ISNONTEXT'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_NONTEXT', 'argumentCount' => '1'),
		'ISNUMBER'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_NUMBER', 'argumentCount' => '1'),
		'ISODD'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_ODD', 'argumentCount' => '1'),
		'ISPMT'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::ISPMT', 'argumentCount' => '4'),
		'ISREF'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'ISTEXT'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::IS_TEXT', 'argumentCount' => '1'),
		'JIS'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'KURT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::KURT', 'argumentCount' => '1+'),
		'LARGE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LARGE', 'argumentCount' => '2'),
		'LCM'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::LCM', 'argumentCount' => '1+'),
		'LEFT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::LEFT', 'argumentCount' => '1,2'),
		'LEFTB'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::LEFT', 'argumentCount' => '1,2'),
		'LEN'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::STRINGLENGTH', 'argumentCount' => '1'),
		'LENB'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::STRINGLENGTH', 'argumentCount' => '1'),
		'LINEST'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LINEST', 'argumentCount' => '1-4'),
		'LN'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'log', 'argumentCount' => '1'),
		'LOG'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::LOG_BASE', 'argumentCount' => '1,2'),
		'LOG10'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'log10', 'argumentCount' => '1'),
		'LOGEST'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGEST', 'argumentCount' => '1-4'),
		'LOGINV'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGINV', 'argumentCount' => '3'),
		'LOGNORMDIST'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGNORMDIST', 'argumentCount' => '3'),
		'LOOKUP'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::LOOKUP', 'argumentCount' => '2,3'),
		'LOWER'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::LOWERCASE', 'argumentCount' => '1'),
		'MATCH'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::MATCH', 'argumentCount' => '2,3'),
		'MAX'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MAX', 'argumentCount' => '1+'),
		'MAXA'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MAXA', 'argumentCount' => '1+'),
		'MAXIF'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2+'),
		'MDETERM'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MDETERM', 'argumentCount' => '1'),
		'MDURATION'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '5,6'),
		'MEDIAN'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MEDIAN', 'argumentCount' => '1+'),
		'MEDIANIF'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2+'),
		'MID'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::MID', 'argumentCount' => '3'),
		'MIDB'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::MID', 'argumentCount' => '3'),
		'MIN'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MIN', 'argumentCount' => '1+'),
		'MINA'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MINA', 'argumentCount' => '1+'),
		'MINIF'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2+'),
		'MINUTE'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::MINUTEOFHOUR', 'argumentCount' => '1'),
		'MINVERSE'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MINVERSE', 'argumentCount' => '1'),
		'MIRR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MIRR', 'argumentCount' => '3'),
		'MMULT'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MMULT', 'argumentCount' => '2'),
		'MOD'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MOD', 'argumentCount' => '2'),
		'MODE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::MODE', 'argumentCount' => '1+'),
		'MONTH'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::MONTHOFYEAR', 'argumentCount' => '1'),
		'MROUND'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MROUND', 'argumentCount' => '2'),
		'MULTINOMIAL'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::MULTINOMIAL', 'argumentCount' => '1+'),
		'N'                  => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::N', 'argumentCount' => '1'),
		'NA'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::NA', 'argumentCount' => '0'),
		'NEGBINOMDIST'       => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NEGBINOMDIST', 'argumentCount' => '3'),
		'NETWORKDAYS'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::NETWORKDAYS', 'argumentCount' => '2+'),
		'NOMINAL'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NOMINAL', 'argumentCount' => '2'),
		'NORMDIST'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NORMDIST', 'argumentCount' => '4'),
		'NORMINV'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NORMINV', 'argumentCount' => '3'),
		'NORMSDIST'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NORMSDIST', 'argumentCount' => '1'),
		'NORMSINV'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NORMSINV', 'argumentCount' => '1'),
		'NOT'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGICAL_NOT', 'argumentCount' => '1'),
		'NOW'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DATETIMENOW', 'argumentCount' => '0'),
		'NPER'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NPER', 'argumentCount' => '3-5'),
		'NPV'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::NPV', 'argumentCount' => '2+'),
		'OCT2BIN'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::OCTTOBIN', 'argumentCount' => '1,2'),
		'OCT2DEC'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::OCTTODEC', 'argumentCount' => '1'),
		'OCT2HEX'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_ENGINEERING, 'functionCall' => 'PHPExcel_Calculation_Functions::OCTTOHEX', 'argumentCount' => '1,2'),
		'ODD'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::ODD', 'argumentCount' => '1'),
		'ODDFPRICE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '8,9'),
		'ODDFYIELD'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '8,9'),
		'ODDLPRICE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '7,8'),
		'ODDLYIELD'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '7,8'),
		'OFFSET'             => array(
			'category'          => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE,
			'functionCall'      => 'PHPExcel_Calculation_Functions::OFFSET',
			'argumentCount'     => '3,5',
			'passCellReference' => true,
			'passByReference'   => array(true)
			),
		'OR'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGICAL_OR', 'argumentCount' => '1+'),
		'PEARSON'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::CORREL', 'argumentCount' => '2'),
		'PERCENTILE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PERCENTILE', 'argumentCount' => '2'),
		'PERCENTRANK'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PERCENTRANK', 'argumentCount' => '2,3'),
		'PERMUT'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PERMUT', 'argumentCount' => '2'),
		'PHONETIC'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'PI'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'pi', 'argumentCount' => '0'),
		'PMT'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PMT', 'argumentCount' => '3-5'),
		'POISSON'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::POISSON', 'argumentCount' => '3'),
		'POWER'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::POWER', 'argumentCount' => '2'),
		'PPMT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PPMT', 'argumentCount' => '4-6'),
		'PRICE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PRICE', 'argumentCount' => '6,7'),
		'PRICEDISC'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PRICEDISC', 'argumentCount' => '4,5'),
		'PRICEMAT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PRICEMAT', 'argumentCount' => '5,6'),
		'PROB'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '3,4'),
		'PRODUCT'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::PRODUCT', 'argumentCount' => '1+'),
		'PROPER'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::PROPERCASE', 'argumentCount' => '1'),
		'PV'                 => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::PV', 'argumentCount' => '3-5'),
		'QUARTILE'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::QUARTILE', 'argumentCount' => '2'),
		'QUOTIENT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::QUOTIENT', 'argumentCount' => '2'),
		'RADIANS'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'deg2rad', 'argumentCount' => '1'),
		'RAND'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::RAND', 'argumentCount' => '0'),
		'RANDBETWEEN'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::RAND', 'argumentCount' => '2'),
		'RANK'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::RANK', 'argumentCount' => '2,3'),
		'RATE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::RATE', 'argumentCount' => '3-6'),
		'RECEIVED'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::RECEIVED', 'argumentCount' => '4-5'),
		'REPLACE'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::REPLACE', 'argumentCount' => '4'),
		'REPLACEB'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::REPLACE', 'argumentCount' => '4'),
		'REPT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'str_repeat', 'argumentCount' => '2'),
		'RIGHT'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::RIGHT', 'argumentCount' => '1,2'),
		'RIGHTB'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::RIGHT', 'argumentCount' => '1,2'),
		'ROMAN'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::ROMAN', 'argumentCount' => '1,2'),
		'ROUND'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'round', 'argumentCount' => '2'),
		'ROUNDDOWN'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::ROUNDDOWN', 'argumentCount' => '2'),
		'ROUNDUP'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::ROUNDUP', 'argumentCount' => '2'),
		'ROW'                => array(
			'category'        => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE,
			'functionCall'    => 'PHPExcel_Calculation_Functions::ROW',
			'argumentCount'   => '-1',
			'passByReference' => array(true)
			),
		'ROWS'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::ROWS', 'argumentCount' => '1'),
		'RSQ'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::RSQ', 'argumentCount' => '2'),
		'RTD'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1+'),
		'SEARCH'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::SEARCHINSENSITIVE', 'argumentCount' => '2,3'),
		'SEARCHB'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::SEARCHINSENSITIVE', 'argumentCount' => '2,3'),
		'SECOND'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::SECONDOFMINUTE', 'argumentCount' => '1'),
		'SERIESSUM'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SERIESSUM', 'argumentCount' => '4'),
		'SIGN'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SIGN', 'argumentCount' => '1'),
		'SIN'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'sin', 'argumentCount' => '1'),
		'SINH'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'sinh', 'argumentCount' => '1'),
		'SKEW'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::SKEW', 'argumentCount' => '1+'),
		'SLN'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::SLN', 'argumentCount' => '3'),
		'SLOPE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::SLOPE', 'argumentCount' => '2'),
		'SMALL'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::SMALL', 'argumentCount' => '2'),
		'SQRT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'sqrt', 'argumentCount' => '1'),
		'SQRTPI'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SQRTPI', 'argumentCount' => '1'),
		'STANDARDIZE'        => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STANDARDIZE', 'argumentCount' => '3'),
		'STDEV'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STDEV', 'argumentCount' => '1+'),
		'STDEVA'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STDEVA', 'argumentCount' => '1+'),
		'STDEVP'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STDEVP', 'argumentCount' => '1+'),
		'STDEVPA'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STDEVPA', 'argumentCount' => '1+'),
		'STEYX'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::STEYX', 'argumentCount' => '2'),
		'SUBSTITUTE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::SUBSTITUTE', 'argumentCount' => '3,4'),
		'SUBTOTAL'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUBTOTAL', 'argumentCount' => '2+'),
		'SUM'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUM', 'argumentCount' => '1+'),
		'SUMIF'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMIF', 'argumentCount' => '2,3'),
		'SUMIFS'             => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '?'),
		'SUMPRODUCT'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMPRODUCT', 'argumentCount' => '1+'),
		'SUMSQ'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMSQ', 'argumentCount' => '1+'),
		'SUMX2MY2'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMX2MY2', 'argumentCount' => '2'),
		'SUMX2PY2'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMX2PY2', 'argumentCount' => '2'),
		'SUMXMY2'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::SUMXMY2', 'argumentCount' => '2'),
		'SYD'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::SYD', 'argumentCount' => '4'),
		'T'                  => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::RETURNSTRING', 'argumentCount' => '1'),
		'TAN'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'tan', 'argumentCount' => '1'),
		'TANH'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'tanh', 'argumentCount' => '1'),
		'TBILLEQ'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TBILLEQ', 'argumentCount' => '3'),
		'TBILLPRICE'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TBILLPRICE', 'argumentCount' => '3'),
		'TBILLYIELD'         => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TBILLYIELD', 'argumentCount' => '3'),
		'TDIST'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TDIST', 'argumentCount' => '3'),
		'TEXT'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::TEXTFORMAT', 'argumentCount' => '2'),
		'TIME'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::TIME', 'argumentCount' => '3'),
		'TIMEVALUE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::TIMEVALUE', 'argumentCount' => '1'),
		'TINV'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TINV', 'argumentCount' => '2'),
		'TODAY'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DATENOW', 'argumentCount' => '0'),
		'TRANSPOSE'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::TRANSPOSE', 'argumentCount' => '1'),
		'TREND'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TREND', 'argumentCount' => '1-4'),
		'TRIM'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::TRIMSPACES', 'argumentCount' => '1'),
		'TRIMMEAN'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::TRIMMEAN', 'argumentCount' => '2'),
		'TRUE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOGICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::LOGICAL_TRUE', 'argumentCount' => '0'),
		'TRUNC'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_MATH_AND_TRIG, 'functionCall' => 'PHPExcel_Calculation_Functions::TRUNC', 'argumentCount' => '1,2'),
		'TTEST'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '4'),
		'TYPE'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::TYPE', 'argumentCount' => '1'),
		'UPPER'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::UPPERCASE', 'argumentCount' => '1'),
		'USDOLLAR'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '2'),
		'VALUE'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_TEXT_AND_DATA, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '1'),
		'VAR'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::VARFunc', 'argumentCount' => '1+'),
		'VARA'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::VARA', 'argumentCount' => '1+'),
		'VARP'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::VARP', 'argumentCount' => '1+'),
		'VARPA'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::VARPA', 'argumentCount' => '1+'),
		'VDB'                => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '5-7'),
		'VERSION'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_INFORMATION, 'functionCall' => 'PHPExcel_Calculation_Functions::VERSION', 'argumentCount' => '0'),
		'VLOOKUP'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_LOOKUP_AND_REFERENCE, 'functionCall' => 'PHPExcel_Calculation_Functions::VLOOKUP', 'argumentCount' => '3,4'),
		'WEEKDAY'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::DAYOFWEEK', 'argumentCount' => '1,2'),
		'WEEKNUM'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::WEEKOFYEAR', 'argumentCount' => '1,2'),
		'WEIBULL'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::WEIBULL', 'argumentCount' => '4'),
		'WORKDAY'            => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::WORKDAY', 'argumentCount' => '2+'),
		'XIRR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::XIRR', 'argumentCount' => '2,3'),
		'XNPV'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::XNPV', 'argumentCount' => '3'),
		'YEAR'               => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::YEAR', 'argumentCount' => '1'),
		'YEARFRAC'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_DATE_AND_TIME, 'functionCall' => 'PHPExcel_Calculation_Functions::YEARFRAC', 'argumentCount' => '2,3'),
		'YIELD'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::DUMMY', 'argumentCount' => '6,7'),
		'YIELDDISC'          => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::YIELDDISC', 'argumentCount' => '4,5'),
		'YIELDMAT'           => array('category' => PHPExcel_Calculation_Function::CATEGORY_FINANCIAL, 'functionCall' => 'PHPExcel_Calculation_Functions::YIELDMAT', 'argumentCount' => '5,6'),
		'ZTEST'              => array('category' => PHPExcel_Calculation_Function::CATEGORY_STATISTICAL, 'functionCall' => 'PHPExcel_Calculation_Functions::ZTEST', 'argumentCount' => '2-3')
		);
	static private $_controlFunctions = array(
		'MKMATRIX' => array('argumentCount' => '*', 'functionCall' => 'self::_mkMatrix')
		);
	static private $functionReplaceFromExcel;
	static private $functionReplaceToLocale;
	static private $functionReplaceFromLocale;
	static private $functionReplaceToExcel;

	public function __construct()
	{
		$localeFileDirectory = PHPEXCEL_ROOT . 'PHPExcel/locale/';

		foreach (glob($localeFileDirectory . '/*', GLOB_ONLYDIR) as $filename) {
			$filename = substr($filename, strlen($localeFileDirectory) + 1);

			if ($filename != 'en') {
				self::$_validLocaleLanguages[] = $filename;
			}
		}
	}

	static public function getInstance()
	{
		if (!isset(self::$_instance) || is_null(self::$_instance)) {
			self::$_instance = new PHPExcel_Calculation();
		}

		return self::$_instance;
	}

	final public function __clone()
	{
		throw new Exception('Cloning a Singleton is not allowed!');
	}

	static public function setArrayReturnType($returnType)
	{
		if (($returnType == self::RETURN_ARRAY_AS_VALUE) || ($returnType == self::RETURN_ARRAY_AS_ERROR) || ($returnType == self::RETURN_ARRAY_AS_ARRAY)) {
			self::$returnArrayAsType = $returnType;
			return true;
		}

		return false;
	}

	static public function getArrayReturnType()
	{
		return self::$returnArrayAsType;
	}

	public function getCalculationCacheEnabled()
	{
		return self::$_calculationCacheEnabled;
	}

	public function setCalculationCacheEnabled($pValue = true)
	{
		self::$_calculationCacheEnabled = $pValue;
		$this->clearCalculationCache();
	}

	public function enableCalculationCache()
	{
		$this->setCalculationCacheEnabled(true);
	}

	public function disableCalculationCache()
	{
		$this->setCalculationCacheEnabled(false);
	}

	public function clearCalculationCache()
	{
		self::$_calculationCache = array();
	}

	public function getCalculationCacheExpirationTime()
	{
		return self::$_calculationCacheExpirationTime;
	}

	public function setCalculationCacheExpirationTime($pValue = 2.5)
	{
		self::$_calculationCacheExpirationTime = $pValue;
	}

	public function getLocale()
	{
		return self::$_localeLanguage;
	}

	public function setLocale($locale = 'en_us')
	{
		$language = $locale = strtolower($locale);

		if (strpos($locale, '_') !== false) {
			list($language) = explode('_', $locale);
		}

		if (in_array($language, self::$_validLocaleLanguages)) {
			self::$_localeFunctions = array();
			self::$_localeArgumentSeparator = ',';
			self::$_localeBoolean = array('TRUE' => 'TRUE', 'FALSE' => 'FALSE', 'NULL' => 'NULL');

			if ($locale != 'en_us') {
				$functionNamesFile = PHPEXCEL_ROOT . 'PHPExcel/locale/' . str_replace('_', '/', $locale) . '/functions';

				if (!file_exists($functionNamesFile)) {
					$functionNamesFile = PHPEXCEL_ROOT . 'PHPExcel/locale/' . $language . '/functions';

					if (!file_exists($functionNamesFile)) {
						return false;
					}
				}

				$localeFunctions = file($functionNamesFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

				foreach ($localeFunctions as $localeFunction) {
					list($localeFunction) = explode('##', $localeFunction);

					if (strpos($localeFunction, '=') !== false) {
						list($fName, $lfName) = explode('=', $localeFunction);
						$fName = trim($fName);
						$lfName = trim($lfName);
						if (isset(self::$_PHPExcelFunctions[$fName]) && ($lfName != '') && ($fName != $lfName)) {
							self::$_localeFunctions[$fName] = $lfName;
						}
					}
				}

				if (isset(self::$_localeFunctions['TRUE'])) {
					self::$_localeBoolean['TRUE'] = self::$_localeFunctions['TRUE'];
				}

				if (isset(self::$_localeFunctions['FALSE'])) {
					self::$_localeBoolean['FALSE'] = self::$_localeFunctions['FALSE'];
				}

				$configFile = PHPEXCEL_ROOT . 'PHPExcel/locale/' . str_replace('_', '/', $locale) . '/config';

				if (!file_exists($configFile)) {
					$configFile = PHPEXCEL_ROOT . 'PHPExcel/locale/' . $language . '/config';
				}

				if (file_exists($configFile)) {
					$localeSettings = file($configFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

					foreach ($localeSettings as $localeSetting) {
						list($localeSetting) = explode('##', $localeSetting);

						if (strpos($localeSetting, '=') !== false) {
							list($settingName, $settingValue) = explode('=', $localeSetting);
							$settingName = strtoupper(trim($settingName));

							switch ($settingName) {
							case 'ARGUMENTSEPARATOR':
								self::$_localeArgumentSeparator = trim($settingValue);
								break;
							}
						}
					}
				}
			}

			self::$functionReplaceFromExcel = self::$functionReplaceToExcel = self::$functionReplaceFromLocale = self::$functionReplaceToLocale = NULL;
			self::$_localeLanguage = $locale;
			return true;
		}

		return false;
	}

	static public function _translateSeparator($fromSeparator, $toSeparator, $formula, &$inBraces)
	{
		$strlen = mb_strlen($formula);

		for ($i = 0; $i < $strlen; ++$i) {
			$chr = mb_substr($formula, $i, 1);

			switch ($chr) {
			case '{':
				$inBraces = true;
				break;

			case '}':
				$inBraces = false;
				break;

			case $fromSeparator:
				if (!$inBraces) {
					$formula = mb_substr($formula, 0, $i) . $toSeparator . mb_substr($formula, $i + 1);
				}
			}
		}

		return $formula;
	}

	static private function _translateFormula($from, $to, $formula, $fromSeparator, $toSeparator)
	{
		$inBraces = false;

		if (self::$_localeLanguage !== 'en_us') {
			if (strpos($formula, '"') !== false) {
				$temp = explode('"', $formula);

				foreach ($temp as $i => &$value) {
					if (($i % 2) == 0) {
						$value = preg_replace($from, $to, $value);
						$value = self::_translateSeparator($fromSeparator, $toSeparator, $value, $inBraces);
					}
				}

				unset($value);
				$formula = implode('"', $temp);
			}
			else {
				$formula = preg_replace($from, $to, $formula);
				$formula = self::_translateSeparator($fromSeparator, $toSeparator, $formula);
			}
		}

		return $formula;
	}

	public function _translateFormulaToLocale($formula)
	{
		if (is_null(self::$functionReplaceFromExcel)) {
			self::$functionReplaceFromExcel = array();

			foreach (array_keys(self::$_localeFunctions) as $excelFunctionName) {
				self::$functionReplaceFromExcel[] = '/(@?[^\\w\\.])' . preg_quote($excelFunctionName) . '([\\s]*\\()/Ui';
			}

			foreach (array_keys(self::$_localeBoolean) as $excelBoolean) {
				self::$functionReplaceFromExcel[] = '/(@?[^\\w\\.])' . preg_quote($excelBoolean) . '([^\\w\\.])/Ui';
			}
		}

		if (is_null(self::$functionReplaceToLocale)) {
			self::$functionReplaceToLocale = array();

			foreach (array_values(self::$_localeFunctions) as $localeFunctionName) {
				self::$functionReplaceToLocale[] = '$1' . trim($localeFunctionName) . '$2';
			}

			foreach (array_values(self::$_localeBoolean) as $localeBoolean) {
				self::$functionReplaceToLocale[] = '$1' . trim($localeBoolean) . '$2';
			}
		}

		return self::_translateFormula(self::$functionReplaceFromExcel, self::$functionReplaceToLocale, $formula, ',', self::$_localeArgumentSeparator);
	}

	public function _translateFormulaToEnglish($formula)
	{
		if (is_null(self::$functionReplaceFromLocale)) {
			self::$functionReplaceFromLocale = array();

			foreach (array_values(self::$_localeFunctions) as $localeFunctionName) {
				self::$functionReplaceFromLocale[] = '/(@?[^\\w\\.])' . preg_quote($localeFunctionName) . '([\\s]*\\()/Ui';
			}

			foreach (array_values(self::$_localeBoolean) as $excelBoolean) {
				self::$functionReplaceFromLocale[] = '/(@?[^\\w\\.])' . preg_quote($excelBoolean) . '([^\\w\\.])/Ui';
			}
		}

		if (is_null(self::$functionReplaceToExcel)) {
			self::$functionReplaceToExcel = array();

			foreach (array_keys(self::$_localeFunctions) as $excelFunctionName) {
				self::$functionReplaceToExcel[] = '$1' . trim($excelFunctionName) . '$2';
			}

			foreach (array_keys(self::$_localeBoolean) as $excelBoolean) {
				self::$functionReplaceToExcel[] = '$1' . trim($excelBoolean) . '$2';
			}
		}

		return self::_translateFormula(self::$functionReplaceFromLocale, self::$functionReplaceToExcel, $formula, self::$_localeArgumentSeparator, ',');
	}

	static public function _localeFunc($function)
	{
		if (self::$_localeLanguage !== 'en_us') {
			$functionName = trim($function, '(');

			if (isset(self::$_localeFunctions[$functionName])) {
				$brace = $functionName != $function;
				$function = self::$_localeFunctions[$functionName];

				if ($brace) {
					$function .= '(';
				}
			}
		}

		return $function;
	}

	static public function _wrapResult($value)
	{
		if (is_string($value)) {
			if (preg_match('/^' . self::CALCULATION_REGEXP_ERROR . '$/i', $value, $match)) {
				return $value;
			}

			return '"' . $value . '"';
		}
		else {
			if (is_float($value) && (is_nan($value) || is_infinite($value))) {
				return PHPExcel_Calculation_Functions::NaN();
			}
		}

		return $value;
	}

	static public function _unwrapResult($value)
	{
		if (is_string($value)) {
			if ((0 < strlen($value)) && ($value[0] == '"') && (substr($value, -1) == '"')) {
				return substr($value, 1, -1);
			}
		}
		else {
			if (is_float($value) && (is_nan($value) || is_infinite($value))) {
				return PHPExcel_Calculation_Functions::NaN();
			}
		}

		return $value;
	}

	public function calculate(PHPExcel_Cell $pCell = NULL)
	{
		try {
			return $this->calculateCellValue($pCell);
		}
		catch (Exception $e) {
			throw new Exception($e->getMessage());
		}
	}

	public function calculateCellValue(PHPExcel_Cell $pCell = NULL, $resetLog = true)
	{
		if ($resetLog) {
			$this->formulaError = NULL;
			$this->debugLog = $this->debugLogStack = array();
			$this->_cyclicFormulaCount = 1;
			$returnArrayAsType = self::$returnArrayAsType;
			self::$returnArrayAsType = self::RETURN_ARRAY_AS_ARRAY;
		}

		if (is_null($pCell)) {
			return NULL;
		}

		if ($resetLog) {
			self::$returnArrayAsType = $returnArrayAsType;
		}

		try {
			$result = self::_unwrapResult($this->_calculateFormulaValue($pCell->getValue(), $pCell->getCoordinate(), $pCell));
		}
		catch (Exception $e) {
			throw new Exception($e->getMessage());
		}

		if (is_array($result) && (self::$returnArrayAsType != self::RETURN_ARRAY_AS_ARRAY)) {
			$testResult = PHPExcel_Calculation_Functions::flattenArray($result);

			if (self::$returnArrayAsType == self::RETURN_ARRAY_AS_ERROR) {
				return PHPExcel_Calculation_Functions::VALUE();
			}

			if (count($testResult) != 1) {
				$r = array_keys($result);
				$r = array_shift($r);

				if (!is_numeric($r)) {
					return PHPExcel_Calculation_Functions::VALUE();
				}

				if (is_array($result[$r])) {
					$c = array_keys($result[$r]);
					$c = array_shift($c);

					if (!is_numeric($c)) {
						return PHPExcel_Calculation_Functions::VALUE();
					}
				}
			}

			$result = array_shift($testResult);
		}

		if (is_null($result)) {
			return 0;
		}
		else {
			if (is_float($result) && (is_nan($result) || is_infinite($result))) {
				return PHPExcel_Calculation_Functions::NaN();
			}
		}

		return $result;
	}

	public function parseFormula($formula)
	{
		$formula = trim($formula);
		if ((strlen($formula) == 0) || ($formula[0] != '=')) {
			return array();
		}

		$formula = trim(substr($formula, 1));
		$formulaLength = strlen($formula);

		if ($formulaLength < 1) {
			return array();
		}

		return $this->_parseFormula($formula);
	}

	public function calculateFormula($formula, $cellID = NULL, PHPExcel_Cell $pCell = NULL)
	{
		$this->formulaError = NULL;
		$this->debugLog = $this->debugLogStack = array();
		$resetCache = $this->getCalculationCacheEnabled();
		self::$_calculationCacheEnabled = false;

		try {
			$result = self::_unwrapResult($this->_calculateFormulaValue($formula, $cellID, $pCell));
		}
		catch (Exception $e) {
			throw new Exception($e->getMessage());
		}

		self::$_calculationCacheEnabled = $resetCache;
		return $result;
	}

	public function _calculateFormulaValue($formula, $cellID = NULL, PHPExcel_Cell $pCell = NULL)
	{
		$cellValue = '';
		$formula = trim($formula);

		if ($formula[0] != '=') {
			return self::_wrapResult($formula);
		}

		$formula = trim(substr($formula, 1));
		$formulaLength = strlen($formula);

		if ($formulaLength < 1) {
			return self::_wrapResult($formula);
		}

		$wsTitle = 'Wrk';

		if (!is_null($pCell)) {
			$pCellParent = $pCell->getParent();

			if (!is_null($pCellParent)) {
				$wsTitle = $pCellParent->getTitle();
			}
		}

		if (!is_null($cellID)) {
			if (self::$_calculationCacheEnabled) {
				if (isset(self::$_calculationCache[$wsTitle][$cellID])) {
					$this->_writeDebug('Testing cache value for cell ' . $cellID);

					if (((time() + microtime(true)) - self::$_calculationCache[$wsTitle][$cellID]['time']) < self::$_calculationCacheExpirationTime) {
						$this->_writeDebug('Retrieving value for ' . $cellID . ' from cache');
						$returnValue = self::$_calculationCache[$wsTitle][$cellID]['data'];

						if (is_array($returnValue)) {
							$returnValue = PHPExcel_Calculation_Functions::flattenArray($returnValue);
							return array_shift($returnValue);
						}

						return $returnValue;
					}
					else {
						$this->_writeDebug('Cache value for ' . $cellID . ' has expired');
						unset(self::$_calculationCache[$wsTitle][$cellID]);
					}
				}
			}
		}

		if (in_array($wsTitle . '!' . $cellID, $this->debugLogStack) && ($wsTitle != 'Wrk')) {
			if ($this->cyclicFormulaCount <= 0) {
				return $this->_raiseFormulaError('Cyclic Reference in Formula');
			}
			else {
				if (($this->cyclicFormulaCount <= $this->_cyclicFormulaCount) && ($this->_cyclicFormulaCell == ($wsTitle . '!' . $cellID))) {
					return $cellValue;
				}
				else if ($this->_cyclicFormulaCell == ($wsTitle . '!' . $cellID)) {
					$this->_cyclicFormulaCount++;

					if ($this->cyclicFormulaCount <= $this->_cyclicFormulaCount) {
						return $cellValue;
					}
				}
				else if ($this->_cyclicFormulaCell == '') {
					$this->_cyclicFormulaCell = $wsTitle . '!' . $cellID;

					if ($this->cyclicFormulaCount <= $this->_cyclicFormulaCount) {
						return $cellValue;
					}
				}
			}
		}

		$this->debugLogStack[] = $wsTitle . '!' . $cellID;
		$cellValue = $this->_processTokenStack($this->_parseFormula($formula), $cellID, $pCell);
		array_pop($this->debugLogStack);

		if (!is_null($cellID)) {
			if (self::$_calculationCacheEnabled) {
				self::$_calculationCache[$wsTitle][$cellID]['time'] = time() + microtime(true);
				self::$_calculationCache[$wsTitle][$cellID]['data'] = $cellValue;
			}
		}

		return $cellValue;
	}

	static private function _checkMatrixOperands(&$operand1, &$operand2, $resize = 1)
	{
		if (!is_array($operand1)) {
			list($matrixRows, $matrixColumns) = self::_getMatrixDimensions($operand2);
			$operand1 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand1));
			$resize = 0;
		}
		else if (!is_array($operand2)) {
			list($matrixRows, $matrixColumns) = self::_getMatrixDimensions($operand1);
			$operand2 = array_fill(0, $matrixRows, array_fill(0, $matrixColumns, $operand2));
			$resize = 0;
		}

		list($matrix1Rows, $matrix1Columns) = self::_getMatrixDimensions($operand1);
		list($matrix2Rows, $matrix2Columns) = self::_getMatrixDimensions($operand2);
		if (($matrix1Rows == $matrix2Columns) && ($matrix2Rows == $matrix1Columns)) {
			$resize = 1;
		}

		if ($resize == 2) {
			self::_resizeMatricesExtend($operand1, $operand2);
		}
		else if ($resize == 1) {
			self::_resizeMatricesShrink($operand1, $operand2);
		}
	}

	static public function _getMatrixDimensions(&$matrix)
	{
		$matrixRows = count($matrix);
		$matrixColumns = 0;

		foreach ($matrix as $rowKey => $rowValue) {
			$colCount = count($rowValue);

			if ($matrixColumns < $colCount) {
				$matrixColumns = $colCount;
			}

			if (!is_array($rowValue)) {
				$matrix[$rowKey] = array($rowValue);
			}
			else {
				$matrix[$rowKey] = array_values($rowValue);
			}
		}

		$matrix = array_values($matrix);
		return array($matrixRows, $matrixColumns);
	}

	static private function _resizeMatricesShrink(&$matrix1, &$matrix2)
	{
		list($matrix1Rows, $matrix1Columns) = self::_getMatrixDimensions($matrix1);
		list($matrix2Rows, $matrix2Columns) = self::_getMatrixDimensions($matrix2);
		if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
			if ($matrix2Columns < $matrix1Columns) {
				for ($i = 0; $i < $matrix1Rows; ++$i) {
					for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
						unset($matrix1[$i][$j]);
					}
				}
			}

			if ($matrix2Rows < $matrix1Rows) {
				for ($i = $matrix2Rows; $i < $matrix1Rows; ++$i) {
					unset($matrix1[$i]);
				}
			}
		}

		if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
			if ($matrix1Columns < $matrix2Columns) {
				for ($i = 0; $i < $matrix2Rows; ++$i) {
					for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
						unset($matrix2[$i][$j]);
					}
				}
			}

			if ($matrix1Rows < $matrix2Rows) {
				for ($i = $matrix1Rows; $i < $matrix2Rows; ++$i) {
					unset($matrix2[$i]);
				}
			}
		}
	}

	static private function _resizeMatricesExtend(&$matrix1, &$matrix2)
	{
		list($matrix1Rows, $matrix1Columns) = self::_getMatrixDimensions($matrix1);
		list($matrix2Rows, $matrix2Columns) = self::_getMatrixDimensions($matrix2);
		if (($matrix2Columns < $matrix1Columns) || ($matrix2Rows < $matrix1Rows)) {
			if ($matrix2Columns < $matrix1Columns) {
				for ($i = 0; $i < $matrix2Rows; ++$i) {
					$x = $matrix2[$i][$matrix2Columns - 1];

					for ($j = $matrix2Columns; $j < $matrix1Columns; ++$j) {
						$matrix2[$i][$j] = $x;
					}
				}
			}

			if ($matrix2Rows < $matrix1Rows) {
				$x = $matrix2[$matrix2Rows - 1];

				for ($i = 0; $i < $matrix1Rows; ++$i) {
					$matrix2[$i] = $x;
				}
			}
		}

		if (($matrix1Columns < $matrix2Columns) || ($matrix1Rows < $matrix2Rows)) {
			if ($matrix1Columns < $matrix2Columns) {
				for ($i = 0; $i < $matrix1Rows; ++$i) {
					$x = $matrix1[$i][$matrix1Columns - 1];

					for ($j = $matrix1Columns; $j < $matrix2Columns; ++$j) {
						$matrix1[$i][$j] = $x;
					}
				}
			}

			if ($matrix1Rows < $matrix2Rows) {
				$x = $matrix1[$matrix1Rows - 1];

				for ($i = 0; $i < $matrix2Rows; ++$i) {
					$matrix1[$i] = $x;
				}
			}
		}
	}

	static private function _showValue($value)
	{
		$testArray = PHPExcel_Calculation_Functions::flattenArray($value);

		if (count($testArray) == 1) {
			$value = array_pop($testArray);
		}

		if (is_array($value)) {
			$returnMatrix = array();
			$pad = $rpad = ', ';

			foreach ($value as $row) {
				if (is_array($row)) {
					$returnMatrix[] = implode($pad, $row);
					$rpad = '; ';
				}
				else {
					$returnMatrix[] = $row;
				}
			}

			return '{ ' . implode($rpad, $returnMatrix) . ' }';
		}
		else if (is_bool($value)) {
			return $value ? self::$_localeBoolean['TRUE'] : self::$_localeBoolean['FALSE'];
		}

		return $value;
	}

	static private function _showTypeDetails($value)
	{
		$testArray = PHPExcel_Calculation_Functions::flattenArray($value);

		if (count($testArray) == 1) {
			$value = array_pop($testArray);
		}

		switch (gettype($value)) {
		case 'double':
		case 'float':
			$typeString = 'a floating point number';
			break;

		case 'integer':
			$typeString = 'an integer number';
			break;

		case 'boolean':
			$typeString = 'a boolean';
			break;

		case 'array':
			$typeString = 'a matrix';
			break;

		case 'string':
			if ($value == '') {
				return 'an empty string';
			}
			else if ($value[0] == '#') {
				return 'a ' . $value . ' error';
			}
			else {
				$typeString = 'a string';
			}

			break;

		case 'NULL':
			return 'a null value';
		}

		return $typeString . ' with a value of ' . self::_showValue($value);
	}

	static private function _convertMatrixReferences($formula)
	{
		static $matrixReplaceFrom = array('{', ';', '}');
		static $matrixReplaceTo = array('MKMATRIX(MKMATRIX(', '),MKMATRIX(', '))');

		if (strpos($formula, '{') !== false) {
			if (strpos($formula, '"') !== false) {
				$temp = explode('"', $formula);
				$openCount = $closeCount = 0;

				foreach ($temp as $i => &$value) {
					if (($i % 2) == 0) {
						$openCount += substr_count($value, '{');
						$closeCount += substr_count($value, '}');
						$value = str_replace($matrixReplaceFrom, $matrixReplaceTo, $value);
					}
				}

				unset($value);
				$formula = implode('"', $temp);
			}
			else {
				$openCount = substr_count($formula, '{');
				$closeCount = substr_count($formula, '}');
				$formula = str_replace($matrixReplaceFrom, $matrixReplaceTo, $formula);
			}

			if ($openCount < $closeCount) {
				if (0 < $openCount) {
					return $this->_raiseFormulaError('Formula Error: Mismatched matrix braces \'}\'');
				}
				else {
					return $this->_raiseFormulaError('Formula Error: Unexpected \'}\' encountered');
				}
			}
			else if ($closeCount < $openCount) {
				if (0 < $closeCount) {
					return $this->_raiseFormulaError('Formula Error: Mismatched matrix braces \'{\'');
				}
				else {
					return $this->_raiseFormulaError('Formula Error: Unexpected \'{\' encountered');
				}
			}
		}

		return $formula;
	}

	static private function _mkMatrix()
	{
		return func_get_args();
	}

	private function _parseFormula($formula)
	{
		if (($formula = self::_convertMatrixReferences(trim($formula))) === false) {
			return false;
		}

		$operatorAssociativity = array('^' => 0, '*' => 0, '/' => 0, '+' => 0, '-' => 0, '&' => 0, '|' => 0, ':' => 0, '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0);
		$comparisonOperators = array('>', '<', '=', '>=', '<=', '<>');
		$operatorPrecedence = array(':' => 8, '|' => 7, '~' => 6, '%' => 5, '^' => 4, '*' => 3, '/' => 3, '+' => 2, '-' => 2, '&' => 1, '>' => 0, '<' => 0, '=' => 0, '>=' => 0, '<=' => 0, '<>' => 0);
		$regexpMatchString = '/^(' . self::CALCULATION_REGEXP_FUNCTION . '|' . self::CALCULATION_REGEXP_NUMBER . '|' . self::CALCULATION_REGEXP_STRING . '|' . self::CALCULATION_REGEXP_OPENBRACE . '|' . self::CALCULATION_REGEXP_CELLREF . '|' . self::CALCULATION_REGEXP_NAMEDRANGE . '|' . self::CALCULATION_REGEXP_ERROR . ')/si';
		$index = 0;
		$stack = new PHPExcel_Token_Stack();
		$output = array();
		$expectingOperator = false;
		$expectingOperand = false;

		while (true) {
			$opCharacter = $formula[$index];
			if (in_array($opCharacter, $comparisonOperators) && ($index < strlen($formula)) && in_array($formula[$index + 1], $comparisonOperators)) {
				$opCharacter .= $formula[++$index];
			}

			$isOperandOrFunction = preg_match($regexpMatchString, substr($formula, $index), $match);
			if (($opCharacter == '-') && !$expectingOperator) {
				$stack->push('Unary Operator', '~');
				++$index;
			}
			else {
				if (($opCharacter == '%') && $expectingOperator) {
					$stack->push('Unary Operator', '%');
					++$index;
				}
				else {
					if (($opCharacter == '+') && !$expectingOperator) {
						++$index;
					}
					else {
						if (($opCharacter == '~') && !$isOperandOrFunction) {
							return $this->_raiseFormulaError('Formula Error: Illegal character \'~\'');
						}
						else {
							if ((in_array($opCharacter, self::$_operators) || $isOperandOrFunction) && $expectingOperator) {
								while ($operatorPrecedence[$opCharacter] < ($operatorPrecedence[$opCharacter] <= $operatorPrecedence[$o2['value']])) {
									$output[] = $stack->pop();
								}

								$stack->push('Binary Operator', $opCharacter);
								++$index;
								$expectingOperator = false;
							}
							else {
								if (($opCharacter == ')') && $expectingOperator) {
									$expectingOperand = false;

									while ($o2['value'] != '(') {
										if (is_null($o2)) {
											return $this->_raiseFormulaError('Formula Error: Unexpected closing brace ")"');
										}
										else {
											$output[] = $o2;
										}
									}

									$d = $stack->last(2);

									if (preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $d['value'], $matches)) {
										$functionName = $matches[1];
										$d = $stack->pop();
										$argumentCount = $d['value'];
										$output[] = $d;
										$output[] = $stack->pop();

										if (array_key_exists($functionName, self::$_controlFunctions)) {
											$expectedArgumentCount = self::$_controlFunctions[$functionName]['argumentCount'];
											$functionCall = self::$_controlFunctions[$functionName]['functionCall'];
										}
										else if (array_key_exists($functionName, self::$_PHPExcelFunctions)) {
											$expectedArgumentCount = self::$_PHPExcelFunctions[$functionName]['argumentCount'];
											$functionCall = self::$_PHPExcelFunctions[$functionName]['functionCall'];
										}
										else {
											return $this->_raiseFormulaError('Formula Error: Internal error, non-function on stack');
										}

										$argumentCountError = false;

										if (is_numeric($expectedArgumentCount)) {
											if ($expectedArgumentCount < 0) {
												if (abs($expectedArgumentCount) < $argumentCount) {
													$argumentCountError = true;
													$expectedArgumentCountString = 'no more than ' . abs($expectedArgumentCount);
												}
											}
											else if ($argumentCount != $expectedArgumentCount) {
												$argumentCountError = true;
												$expectedArgumentCountString = $expectedArgumentCount;
											}
										}
										else if ($expectedArgumentCount != '*') {
											$isOperandOrFunction = preg_match('/(\\d*)([-+,])(\\d*)/', $expectedArgumentCount, $argMatch);

											switch ($argMatch[2]) {
											case '+':
												if ($argumentCount < $argMatch[1]) {
													$argumentCountError = true;
													$expectedArgumentCountString = $argMatch[1] . ' or more ';
												}

												break;

											case '-':
												if (($argumentCount < $argMatch[1]) || ($argMatch[3] < $argumentCount)) {
													$argumentCountError = true;
													$expectedArgumentCountString = 'between ' . $argMatch[1] . ' and ' . $argMatch[3];
												}

												break;

											case ',':
												if (($argumentCount != $argMatch[1]) && ($argumentCount != $argMatch[3])) {
													$argumentCountError = true;
													$expectedArgumentCountString = 'either ' . $argMatch[1] . ' or ' . $argMatch[3];
												}

												break;
											}
										}

										if ($argumentCountError) {
											return $this->_raiseFormulaError('Formula Error: Wrong number of arguments for ' . $functionName . '() function: ' . $argumentCount . ' given, ' . $expectedArgumentCountString . ' expected');
										}
									}

									++$index;
								}
								else if ($opCharacter == ',') {
									while ($o2['value'] != '(') {
										if (is_null($o2)) {
											return $this->_raiseFormulaError('Formula Error: Unexpected ,');
										}
										else {
											$output[] = $o2;
										}
									}

									if ($expectingOperand || !$expectingOperator) {
										$output[] = array('type' => 'NULL Value', 'value' => self::$_ExcelConstants['NULL'], 'reference' => NULL);
									}

									$d = $stack->last(2);

									if (!preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $d['value'], $matches)) {
										return $this->_raiseFormulaError('Formula Error: Unexpected ,');
									}

									$d = $stack->pop();
									$stack->push($d['type'], ++$d['value'], $d['reference']);
									$stack->push('Brace', '(');
									$expectingOperator = false;
									$expectingOperand = true;
									++$index;
								}
								else {
									if (($opCharacter == '(') && !$expectingOperator) {
										$stack->push('Brace', '(');
										++$index;
									}
									else {
										if ($isOperandOrFunction && !$expectingOperator) {
											$expectingOperator = true;
											$expectingOperand = false;
											$val = $match[1];
											$length = strlen($val);

											if (preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $val, $matches)) {
												$val = preg_replace('/\\s/', '', $val);
												if (array_key_exists(strtoupper($matches[1]), self::$_PHPExcelFunctions) || array_key_exists(strtoupper($matches[1]), self::$_controlFunctions)) {
													$stack->push('Function', strtoupper($val));
													$ax = preg_match('/^\\s*(\\s*\\))/i', substr($formula, $index + $length), $amatch);

													if ($ax) {
														$stack->push('Operand Count for Function ' . self::_localeFunc(strtoupper($val)) . ')', 0);
														$expectingOperator = true;
													}
													else {
														$stack->push('Operand Count for Function ' . self::_localeFunc(strtoupper($val)) . ')', 1);
														$expectingOperator = false;
													}

													$stack->push('Brace', '(');
												}
												else {
													$output[] = array('type' => 'Value', 'value' => $matches[1], 'reference' => NULL);
												}
											}
											else if (preg_match('/^' . self::CALCULATION_REGEXP_CELLREF . '$/i', $val, $matches)) {
												$cellRef = strtoupper($val);
												$output[] = array('type' => 'Cell Reference', 'value' => $val, 'reference' => $cellRef);
											}
											else {
												$localeConstant = false;

												if ($opCharacter == '"') {
													$val = self::_wrapResult(str_replace('""', '"', self::_unwrapResult($val)));
												}
												else if (is_numeric($val)) {
													if ((strpos($val, '.') !== false) || (stripos($val, 'e') !== false) || (PHP_INT_MAX < $val) || ($val < (0 - PHP_INT_MAX))) {
														$val = (double) $val;
													}
													else {
														$val = (int) $val;
													}
												}
												else if (array_key_exists(trim(strtoupper($val)), self::$_ExcelConstants)) {
													$excelConstant = trim(strtoupper($val));
													$val = self::$_ExcelConstants[$excelConstant];
												}
												else if (($localeConstant = array_search(trim(strtoupper($val)), self::$_localeBoolean)) !== false) {
													$val = self::$_ExcelConstants[$localeConstant];
												}

												$details = array('type' => 'Value', 'value' => $val, 'reference' => NULL);

												if ($localeConstant) {
													$details['localeValue'] = $localeConstant;
												}

												$output[] = $details;
											}

											$index += $length;
										}
										else if ($opCharacter == ')') {
											if ($expectingOperand) {
												$output[] = array('type' => 'Null Value', 'value' => self::$_ExcelConstants['NULL'], 'reference' => NULL);
												$expectingOperand = false;
												$expectingOperator = true;
											}
											else {
												return $this->_raiseFormulaError('Formula Error: Unexpected \')\'');
											}
										}
										else {
											if (in_array($opCharacter, self::$_operators) && !$expectingOperator) {
												return $this->_raiseFormulaError('Formula Error: Unexpected operator \'' . $opCharacter . '\'');
											}
											else {
												return $this->_raiseFormulaError('Formula Error: An unexpected error occured');
											}
										}
									}
								}
							}
						}
					}
				}
			}

			if ($index == strlen($formula)) {
				if (in_array($opCharacter, self::$_operators) && ($opCharacter != '%')) {
					return $this->_raiseFormulaError('Formula Error: Operator \'' . $opCharacter . '\' has no operands');
				}
				else {
					break;
				}
			}

			while ($formula[$index] == "\r") {
				++$index;
			}

			if ($formula[$index] == ' ') {
				while ($formula[$index] == ' ') {
					++$index;
				}

				if ($expectingOperator && preg_match('/^' . self::CALCULATION_REGEXP_CELLREF . '.*/i', substr($formula, $index), $match) && ($output[count($output) - 1]['type'] == 'Cell Reference')) {
					while ($operatorPrecedence[$opCharacter] < ($operatorPrecedence[$opCharacter] <= $operatorPrecedence[$o2['value']])) {
						$output[] = $stack->pop();
					}

					$stack->push('Binary Operator', '|');
					$expectingOperator = false;
				}
			}
		}

		while (!is_null($op = $stack->pop())) {
			if ($opCharacter['value'] == '(') {
				return $this->_raiseFormulaError('Formula Error: Expecting \')\'');
			}

			$output[] = $op;
		}

		return $output;
	}

	private function _processTokenStack($tokens, $cellID = NULL, PHPExcel_Cell $pCell = NULL)
	{
		if ($tokens == false) {
			return false;
		}

		$pCellParent = (!is_null($pCell) ? $pCell->getParent() : NULL);
		$stack = new PHPExcel_Token_Stack();

		foreach ($tokens as $tokenData) {
			$token = $tokenData['value'];

			if (in_array($token, self::$_binaryOperators, true)) {
				if (is_null($operand2Data = $stack->pop())) {
					return $this->_raiseFormulaError('Internal error - Operand value missing from stack');
				}

				if (is_null($operand1Data = $stack->pop())) {
					return $this->_raiseFormulaError('Internal error - Operand value missing from stack');
				}

				$operand1 = $operand1Data['value'];
				$operand2 = $operand2Data['value'];

				if ($token == ':') {
					$this->_writeDebug('Evaluating Range ' . self::_showValue($operand1Data['reference']) . $token . self::_showValue($operand2Data['reference']));
				}
				else {
					$this->_writeDebug('Evaluating ' . self::_showValue($operand1) . ' ' . $token . ' ' . self::_showValue($operand2));
				}

				switch ($token) {
				case '>':
				case '<':
				case '>=':
				case '<=':
				case '=':
				case '<>':
					$this->_executeBinaryComparisonOperation($cellID, $operand1, $operand2, $token, $stack);
					break;

				case ':':
					$sheet1 = $sheet2 = '';

					if (strpos($operand1Data['reference'], '!') !== false) {
						list($sheet1, $operand1Data['reference']) = explode('!', $operand1Data['reference']);
					}
					else {
						$sheet1 = (!is_null($pCellParent) ? $pCellParent->getTitle() : '');
					}

					if (strpos($operand2Data['reference'], '!') !== false) {
						list($sheet2, $operand2Data['reference']) = explode('!', $operand2Data['reference']);
					}
					else {
						$sheet2 = $sheet1;
					}

					if ($sheet1 == $sheet2) {
						if (is_null($operand1Data['reference'])) {
							if ((trim($operand1Data['value']) != '') && is_numeric($operand1Data['value'])) {
								$operand1Data['reference'] = $pCell->getColumn() . $operand1Data['value'];
							}
							else if (trim($operand1Data['reference']) == '') {
								$operand1Data['reference'] = $pCell->getColumn() . $pCell->getRow();
							}
							else {
								$operand1Data['reference'] = $operand1Data['value'] . $pCell->getRow();
							}
						}

						if (is_null($operand2Data['reference'])) {
							if ((trim($operand2Data['value']) != '') && is_numeric($operand2Data['value'])) {
								$operand2Data['reference'] = $pCell->getColumn() . $operand2Data['value'];
							}
							else if (trim($operand2Data['reference']) == '') {
								$operand2Data['reference'] = $pCell->getColumn() . $pCell->getRow();
							}
							else {
								$operand2Data['reference'] = $operand2Data['value'] . $pCell->getRow();
							}
						}

						$oData = array_merge(explode(':', $operand1Data['reference']), explode(':', $operand2Data['reference']));
						$oCol = $oRow = array();

						foreach ($oData as $oDatum) {
							$oCR = PHPExcel_Cell::coordinateFromString($oDatum);
							$oCol[] = PHPExcel_Cell::columnIndexFromString($oCR[0]) - 1;
							$oRow[] = $oCR[1];
						}

						$cellRef = PHPExcel_Cell::stringFromColumnIndex(min($oCol)) . min($oRow) . ':' . PHPExcel_Cell::stringFromColumnIndex(max($oCol)) . max($oRow);

						if (!is_null($pCellParent)) {
							$cellValue = $this->extractCellRange($cellRef, $pCellParent->getParent()->getSheetByName($sheet1), false);
						}
						else {
							return $this->_raiseFormulaError('Unable to access Cell Reference');
						}

						$stack->push('Cell Reference', $cellValue, $cellRef);
					}
					else {
						$stack->push('Error', PHPExcel_Calculation_Functions::REF(), NULL);
					}

					break;

				case '+':
					$this->_executeNumericBinaryOperation($cellID, $operand1, $operand2, $token, 'plusEquals', $stack);
					break;

				case '-':
					$this->_executeNumericBinaryOperation($cellID, $operand1, $operand2, $token, 'minusEquals', $stack);
					break;

				case '*':
					$this->_executeNumericBinaryOperation($cellID, $operand1, $operand2, $token, 'arrayTimesEquals', $stack);
					break;

				case '/':
					$this->_executeNumericBinaryOperation($cellID, $operand1, $operand2, $token, 'arrayRightDivide', $stack);
					break;

				case '^':
					$this->_executeNumericBinaryOperation($cellID, $operand1, $operand2, $token, 'power', $stack);
					break;

				case '&':
					if (is_bool($operand1)) {
						$operand1 = ($operand1 ? self::$_localeBoolean['TRUE'] : self::$_localeBoolean['FALSE']);
					}

					if (is_bool($operand2)) {
						$operand2 = ($operand2 ? self::$_localeBoolean['TRUE'] : self::$_localeBoolean['FALSE']);
					}

					if (is_array($operand1) || is_array($operand2)) {
						self::_checkMatrixOperands($operand1, $operand2, 2);

						try {
							$matrix = new Matrix($operand1);
							$matrixResult = $matrix->concat($operand2);
							$result = $matrixResult->getArray();
						}
						catch (Exception $ex) {
							$this->_writeDebug('JAMA Matrix Exception: ' . $ex->getMessage());
							$result = '#VALUE!';
						}
					}
					else {
						$result = '"' . str_replace('""', '"', self::_unwrapResult($operand1, '"') . self::_unwrapResult($operand2, '"')) . '"';
					}

					$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($result));
					$stack->push('Value', $result);
					break;

				case '|':
					$rowIntersect = array_intersect_key($operand1, $operand2);
					$cellIntersect = $oCol = $oRow = array();

					foreach (array_keys($rowIntersect) as $col) {
						$oCol[] = PHPExcel_Cell::columnIndexFromString($col) - 1;
						$cellIntersect[$col] = array_intersect_key($operand1[$col], $operand2[$col]);

						foreach ($cellIntersect[$col] as $row => $data) {
							$oRow[] = $row;
						}
					}

					$cellRef = PHPExcel_Cell::stringFromColumnIndex(min($oCol)) . min($oRow) . ':' . PHPExcel_Cell::stringFromColumnIndex(max($oCol)) . max($oRow);
					$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($cellIntersect));
					$stack->push('Value', $cellIntersect, $cellRef);
					break;
				}
			}
			else {
				if (($token === '~') || ($token === '%')) {
					if (is_null($arg = $stack->pop())) {
						return $this->_raiseFormulaError('Internal error - Operand value missing from stack');
					}

					$arg = $arg['value'];

					if ($token === '~') {
						$this->_writeDebug('Evaluating Negation of ' . self::_showValue($arg));
						$multiplier = -1;
					}
					else {
						$this->_writeDebug('Evaluating Percentile of ' . self::_showValue($arg));
						$multiplier = 0.01;
					}

					if (is_array($arg)) {
						self::_checkMatrixOperands($arg, $multiplier, 2);

						try {
							$matrix1 = new Matrix($arg);
							$matrixResult = $matrix1->arrayTimesEquals($multiplier);
							$result = $matrixResult->getArray();
						}
						catch (Exception $ex) {
							$this->_writeDebug('JAMA Matrix Exception: ' . $ex->getMessage());
							$result = '#VALUE!';
						}

						$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($result));
						$stack->push('Value', $result);
					}
					else {
						$this->_executeNumericBinaryOperation($cellID, $multiplier, $arg, '*', 'arrayTimesEquals', $stack);
					}
				}
				else if (preg_match('/^' . self::CALCULATION_REGEXP_CELLREF . '$/i', $token, $matches)) {
					$cellRef = NULL;

					if (isset($matches[8])) {
						if (is_null($pCell)) {
							$cellValue = PHPExcel_Calculation_Functions::REF();
						}
						else {
							$cellRef = $matches[6] . $matches[7] . ':' . $matches[9] . $matches[10];

							if ('' < $matches[2]) {
								$matches[2] = trim($matches[2], '"\'');
								$this->_writeDebug('Evaluating Cell Range ' . $cellRef . ' in worksheet ' . $matches[2]);

								if (!is_null($pCellParent)) {
									$cellValue = $this->extractCellRange($cellRef, $pCellParent->getParent()->getSheetByName($matches[2]), false);
								}
								else {
									return $this->_raiseFormulaError('Unable to access Cell Reference');
								}

								$this->_writeDebug('Evaluation Result for cells ' . $cellRef . ' in worksheet ' . $matches[2] . ' is ' . self::_showTypeDetails($cellValue));
								$cellRef = $matches[2] . '!' . $cellRef;
							}
							else {
								$this->_writeDebug('Evaluating Cell Range ' . $cellRef . ' in current worksheet');

								if (!is_null($pCellParent)) {
									$cellValue = $this->extractCellRange($cellRef, $pCellParent, false);
								}
								else {
									return $this->_raiseFormulaError('Unable to access Cell Reference');
								}

								$this->_writeDebug('Evaluation Result for cells ' . $cellRef . ' is ' . self::_showTypeDetails($cellValue));
							}
						}
					}
					else if (is_null($pCell)) {
						$cellValue = PHPExcel_Calculation_Functions::REF();
					}
					else {
						$cellRef = $matches[6] . $matches[7];

						if ('' < $matches[2]) {
							$matches[2] = trim($matches[2], '"\'');
							$this->_writeDebug('Evaluating Cell ' . $cellRef . ' in worksheet ' . $matches[2]);

							if (!is_null($pCellParent)) {
								if ($pCellParent->getParent()->getSheetByName($matches[2])->cellExists($cellRef)) {
									$cellValue = $this->extractCellRange($cellRef, $pCellParent->getParent()->getSheetByName($matches[2]), false);
									$pCell->attach($pCellParent);
								}
								else {
									$cellValue = PHPExcel_Calculation_Functions::REF();
								}
							}
							else {
								return $this->_raiseFormulaError('Unable to access Cell Reference');
							}

							$this->_writeDebug('Evaluation Result for cell ' . $cellRef . ' in worksheet ' . $matches[2] . ' is ' . self::_showTypeDetails($cellValue));
							$cellRef = $matches[2] . '!' . $cellRef;
						}
						else {
							$this->_writeDebug('Evaluating Cell ' . $cellRef . ' in current worksheet');

							if ($pCellParent->cellExists($cellRef)) {
								$cellValue = $this->extractCellRange($cellRef, $pCellParent, false);
								$pCell->attach($pCellParent);
							}
							else {
								$cellValue = NULL;
							}

							$this->_writeDebug('Evaluation Result for cell ' . $cellRef . ' is ' . self::_showTypeDetails($cellValue));
						}
					}

					$stack->push('Value', $cellValue, $cellRef);
				}
				else if (preg_match('/^' . self::CALCULATION_REGEXP_FUNCTION . '$/i', $token, $matches)) {
					$functionName = $matches[1];
					$argCount = $stack->pop();
					$argCount = $argCount['value'];

					if ($functionName != 'MKMATRIX') {
						$this->_writeDebug('Evaluating Function ' . self::_localeFunc($functionName) . '() with ' . ($argCount == 0 ? 'no' : $argCount) . ' argument' . ($argCount == 1 ? '' : 's'));
					}

					if (array_key_exists($functionName, self::$_PHPExcelFunctions) || array_key_exists($functionName, self::$_controlFunctions)) {
						if (array_key_exists($functionName, self::$_PHPExcelFunctions)) {
							$functionCall = self::$_PHPExcelFunctions[$functionName]['functionCall'];
							$passByReference = isset(self::$_PHPExcelFunctions[$functionName]['passByReference']);
							$passCellReference = isset(self::$_PHPExcelFunctions[$functionName]['passCellReference']);
						}
						else if (array_key_exists($functionName, self::$_controlFunctions)) {
							$functionCall = self::$_controlFunctions[$functionName]['functionCall'];
							$passByReference = isset(self::$_controlFunctions[$functionName]['passByReference']);
							$passCellReference = isset(self::$_controlFunctions[$functionName]['passCellReference']);
						}

						$args = $argArrayVals = array();

						for ($i = 0; $i < $argCount; ++$i) {
							$arg = $stack->pop();
							$a = $argCount - $i - 1;
							if ($passByReference && isset(self::$_PHPExcelFunctions[$functionName]['passByReference'][$a]) && self::$_PHPExcelFunctions[$functionName]['passByReference'][$a]) {
								if (is_null($arg['reference'])) {
									$args[] = $cellID;

									if ($functionName != 'MKMATRIX') {
										$argArrayVals[] = self::_showValue($cellID);
									}
								}
								else {
									$args[] = $arg['reference'];

									if ($functionName != 'MKMATRIX') {
										$argArrayVals[] = self::_showValue($arg['reference']);
									}
								}
							}
							else {
								$args[] = self::_unwrapResult($arg['value']);

								if ($functionName != 'MKMATRIX') {
									$argArrayVals[] = self::_showValue($arg['value']);
								}
							}
						}

						krsort($args);
						if ($passByReference && ($argCount == 0)) {
							$args[] = $cellID;
							$argArrayVals[] = self::_showValue($cellID);
						}

						if ($functionName != 'MKMATRIX') {
							krsort($argArrayVals);
							$this->_writeDebug('Evaluating ' . self::_localeFunc($functionName) . '( ' . implode(self::$_localeArgumentSeparator . ' ', $argArrayVals) . ' )');
						}

						if ($passCellReference) {
							$args[] = $pCell;
						}

						if (strpos($functionCall, '::') !== false) {
							$result = call_user_func_array(explode('::', $functionCall), $args);
						}
						else {
							foreach ($args as &$arg) {
								$arg = PHPExcel_Calculation_Functions::flattenSingleValue($arg);
							}

							unset($arg);
							$result = call_user_func_array($functionCall, $args);
						}

						if ($functionName != 'MKMATRIX') {
							$this->_writeDebug('Evaluation Result for ' . self::_localeFunc($functionName) . '() function call is ' . self::_showTypeDetails($result));
						}

						$stack->push('Value', self::_wrapResult($result));
					}
				}
				else if (array_key_exists(strtoupper($token), self::$_ExcelConstants)) {
					$excelConstant = strtoupper($token);
					$stack->push('Constant Value', self::$_ExcelConstants[$excelConstant]);
					$this->_writeDebug('Evaluating Constant ' . $excelConstant . ' as ' . self::_showTypeDetails(self::$_ExcelConstants[$excelConstant]));
				}
				else {
					if (is_numeric($token) || is_bool($token) || is_null($token) || ($token == '') || ($token[0] == '"') || ($token[0] == '#')) {
						$stack->push('Value', $token);
					}
					else if (preg_match('/^' . self::CALCULATION_REGEXP_NAMEDRANGE . '$/i', $token, $matches)) {
						$namedRange = $matches[6];
						$this->_writeDebug('Evaluating Named Range ' . $namedRange);
						$cellValue = $this->extractNamedRange($namedRange, NULL !== $pCell ? $pCellParent : NULL, false);
						$pCell->attach($pCellParent);
						$this->_writeDebug('Evaluation Result for named range ' . $namedRange . ' is ' . self::_showTypeDetails($cellValue));
						$stack->push('Named Range', $cellValue, $namedRange);
					}
					else {
						return $this->_raiseFormulaError('undefined variable \'' . $token . '\'');
					}
				}
			}
		}

		if ($stack->count() != 1) {
			return $this->_raiseFormulaError('internal error');
		}

		$output = $stack->pop();
		$output = $output['value'];
		return $output;
	}

	private function _validateBinaryOperand($cellID, &$operand, &$stack)
	{
		if (is_string($operand)) {
			if (('' < $operand) && ($operand[0] == '"')) {
				$operand = self::_unwrapResult($operand);
			}

			if (!is_numeric($operand)) {
				if (('' < $operand) && ($operand[0] == '#')) {
					$stack->push('Value', $operand);
					$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($operand));
					return false;
				}
				else if (!PHPExcel_Shared_String::convertToNumberIfFraction($operand)) {
					$stack->push('Value', '#VALUE!');
					$this->_writeDebug('Evaluation Result is a ' . self::_showTypeDetails('#VALUE!'));
					return false;
				}
			}
		}

		return true;
	}

	private function _executeBinaryComparisonOperation($cellID, $operand1, $operand2, $operation, &$stack, $recursingArrays = false)
	{
		if (is_array($operand1) || is_array($operand2)) {
			$result = array();
			if (is_array($operand1) && !is_array($operand2)) {
				foreach ($operand1 as $x => $operandData) {
					$this->_writeDebug('Evaluating ' . self::_showValue($operandData) . ' ' . $operation . ' ' . self::_showValue($operand2));
					$this->_executeBinaryComparisonOperation($cellID, $operandData, $operand2, $operation, $stack);
					$r = $stack->pop();
					$result[$x] = $r['value'];
				}
			}
			else {
				if (!is_array($operand1) && is_array($operand2)) {
					foreach ($operand2 as $x => $operandData) {
						$this->_writeDebug('Evaluating ' . self::_showValue($operand1) . ' ' . $operation . ' ' . self::_showValue($operandData));
						$this->_executeBinaryComparisonOperation($cellID, $operand1, $operandData, $operation, $stack);
						$r = $stack->pop();
						$result[$x] = $r['value'];
					}
				}
				else {
					if (!$recursingArrays) {
						self::_checkMatrixOperands($operand1, $operand2, 2);
					}

					foreach ($operand1 as $x => $operandData) {
						$this->_writeDebug('Evaluating ' . self::_showValue($operandData) . ' ' . $operation . ' ' . self::_showValue($operand2[$x]));
						$this->_executeBinaryComparisonOperation($cellID, $operandData, $operand2[$x], $operation, $stack, true);
						$r = $stack->pop();
						$result[$x] = $r['value'];
					}
				}
			}

			$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($result));
			$stack->push('Array', $result);
			return true;
		}

		if (is_string($operand1) && ('' < $operand1) && ($operand1[0] == '"')) {
			$operand1 = self::_unwrapResult($operand1);
		}

		if (is_string($operand2) && ('' < $operand2) && ($operand2[0] == '"')) {
			$operand2 = self::_unwrapResult($operand2);
		}

		switch ($operation) {
		case '>':
			$result = $operand2 < $operand1;
			break;

		case '<':
			$result = $operand1 < $operand2;
			break;

		case '=':
			$result = $operand1 == $operand2;
			break;

		case '>=':
			$result = $operand2 <= $operand1;
			break;

		case '<=':
			$result = $operand1 <= $operand2;
			break;

		case '<>':
			$result = $operand1 != $operand2;
			break;
		}

		$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($result));
		$stack->push('Value', $result);
		return true;
	}

	private function _executeNumericBinaryOperation($cellID, $operand1, $operand2, $operation, $matrixFunction, &$stack)
	{
		if (!$this->_validateBinaryOperand($cellID, $operand1, $stack)) {
			return false;
		}

		if (!$this->_validateBinaryOperand($cellID, $operand2, $stack)) {
			return false;
		}

		if (is_array($operand1) || is_array($operand2)) {
			self::_checkMatrixOperands($operand1, $operand2, 2);

			try {
				$matrix = new Matrix($operand1);
				$matrixResult = $matrix->$matrixFunction($operand2);
				$result = $matrixResult->getArray();
			}
			catch (Exception $ex) {
				$this->_writeDebug('JAMA Matrix Exception: ' . $ex->getMessage());
				$result = '#VALUE!';
			}
		}
		else {
			switch ($operation) {
			case '+':
				$result = $operand1 + $operand2;
				break;

			case '-':
				$result = $operand1 - $operand2;
				break;

			case '*':
				$result = $operand1 * $operand2;
				break;

			case '/':
				if ($operand2 == 0) {
					$stack->push('Value', '#DIV/0!');
					$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails('#DIV/0!'));
					return false;
				}
				else {
					$result = $operand1 / $operand2;
				}

				break;

			case '^':
				$result = pow($operand1, $operand2);
				break;
			}
		}

		$this->_writeDebug('Evaluation Result is ' . self::_showTypeDetails($result));
		$stack->push('Value', $result);
		return true;
	}

	private function _writeDebug($message)
	{
		if ($this->writeDebugLog) {
			$this->debugLog[] = implode(' -> ', $this->debugLogStack) . ' -> ' . $message;
		}
	}

	protected function _raiseFormulaError($errorMessage)
	{
		$this->formulaError = $errorMessage;

		if (!$this->suppressFormulaErrors) {
			throw new Exception($errorMessage);
		}

		trigger_error($errorMessage, 256);
	}

	public function extractCellRange(&$pRange = 'A1', PHPExcel_Worksheet $pSheet = NULL, $resetLog = true)
	{
		$returnValue = array();

		if (!is_null($pSheet)) {
			if (strpos($pRange, '!') !== false) {
				$worksheetReference = PHPExcel_Worksheet::extractSheetTitle($pRange, true);
				$pSheet = $pSheet->getParent()->getSheetByName($worksheetReference[0]);
				$pRange = $worksheetReference[1];
			}

			$aReferences = PHPExcel_Cell::extractAllCellReferencesInRange($pRange);
			$pRange = $pSheet->getTitle() . '!' . $pRange;

			if (count($aReferences) == 1) {
				list($currentCol, $currentRow) = PHPExcel_Cell::coordinateFromString($aReferences[0]);

				if ($pSheet->cellExists($aReferences[0])) {
					$returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
				}
				else {
					$returnValue[$currentRow][$currentCol] = NULL;
				}
			}
			else {
				foreach ($aReferences as $reference) {
					list($currentCol, $currentRow) = PHPExcel_Cell::coordinateFromString($reference);

					if ($pSheet->cellExists($reference)) {
						$returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
					}
					else {
						$returnValue[$currentRow][$currentCol] = NULL;
					}
				}
			}
		}

		return $returnValue;
	}

	public function extractNamedRange(&$pRange = 'A1', PHPExcel_Worksheet $pSheet = NULL, $resetLog = true)
	{
		$returnValue = array();

		if (!is_null($pSheet)) {
			if (strpos($pRange, '!') !== false) {
				$worksheetReference = PHPExcel_Worksheet::extractSheetTitle($pRange, true);
				$pSheet = $pSheet->getParent()->getSheetByName($worksheetReference[0]);
				$pRange = $worksheetReference[1];
			}

			$namedRange = PHPExcel_NamedRange::resolveRange($pRange, $pSheet);

			if (!is_null($namedRange)) {
				$pSheet = $namedRange->getWorksheet();
				$pRange = $namedRange->getRange();
			}
			else {
				return PHPExcel_Calculation_Functions::REF();
			}

			$aReferences = PHPExcel_Cell::extractAllCellReferencesInRange($pRange);

			if (count($aReferences) == 1) {
				list($currentCol, $currentRow) = PHPExcel_Cell::coordinateFromString($aReferences[0]);

				if ($pSheet->cellExists($aReferences[0])) {
					$returnValue[$currentRow][$currentCol] = $pSheet->getCell($aReferences[0])->getCalculatedValue($resetLog);
				}
				else {
					$returnValue[$currentRow][$currentCol] = NULL;
				}
			}
			else {
				foreach ($aReferences as $reference) {
					list($currentCol, $currentRow) = PHPExcel_Cell::coordinateFromString($reference);

					if ($pSheet->cellExists($reference)) {
						$returnValue[$currentRow][$currentCol] = $pSheet->getCell($reference)->getCalculatedValue($resetLog);
					}
					else {
						$returnValue[$currentRow][$currentCol] = NULL;
					}
				}
			}
		}

		return $returnValue;
	}

	public function isImplemented($pFunction = '')
	{
		$pFunction = strtoupper($pFunction);

		if (isset(self::$_PHPExcelFunctions[$pFunction])) {
			return self::$_PHPExcelFunctions[$pFunction]['functionCall'] != 'PHPExcel_Calculation_Functions::DUMMY';
		}
		else {
			return false;
		}
	}

	public function listFunctions()
	{
		$returnValue = array();

		foreach (self::$_PHPExcelFunctions as $functionName => $function) {
			if ($function['functionCall'] != 'PHPExcel_Calculation_Functions::DUMMY') {
				$returnValue[$functionName] = new PHPExcel_Calculation_Function($function['category'], $functionName, $function['functionCall']);
			}
		}

		return $returnValue;
	}

	public function listFunctionNames()
	{
		return array_keys(self::$_PHPExcelFunctions);
	}
}

class PHPExcel_Token_Stack
{
	private $_stack = array();
	private $_count = 0;

	public function count()
	{
		return $this->_count;
	}

	public function push($type, $value, $reference = NULL)
	{
		$this->_stack[$this->_count++] = array('type' => $type, 'value' => $value, 'reference' => $reference);

		if ($type == 'Function') {
			$localeFunction = PHPExcel_Calculation::_localeFunc($value);

			if ($localeFunction != $value) {
				$this->_stack[$this->_count - 1]['localeValue'] = $localeFunction;
			}
		}
	}

	public function pop()
	{
		if (0 < $this->_count) {
			return $this->_stack[--$this->_count];
		}

		return NULL;
	}

	public function last($n = 1)
	{
		if (($this->_count - $n) < 0) {
			return NULL;
		}

		return $this->_stack[$this->_count - $n];
	}

	public function __construct()
	{
	}
}

if (!defined('PHPEXCEL_ROOT')) {
	define('PHPEXCEL_ROOT', dirname(__FILE__) . '/../');
	require PHPEXCEL_ROOT . 'PHPExcel/Autoloader.php';
	PHPExcel_Autoloader::Register();
	PHPExcel_Shared_ZipStreamWrapper::register();

	if (ini_get('mbstring.func_overload') & 2) {
		throw new Exception('Multibyte function overloading in PHP must be disabled for string functions (2).');
	}
}

require_once PHPEXCEL_ROOT . 'PHPExcel/Shared/JAMA/Matrix.php';

?>
